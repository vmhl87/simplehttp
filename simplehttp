#!/home/vincent/.local/bin/python3

import http.server
import mimetypes
import time
import sys
import os


PORT = 8000

if len(sys.argv) == 2:
    if sys.argv[1] in ["-h", "--help"]:
        print("simplehttp <PORT>")
        sys.exit(0)

    PORT = int(sys.argv[1])


_cur = 0
def gen_nonce():
    global _cur
    _cur += 1
    return _cur


current = {}

def finish_progress(filename, nonce):
    global current
    current.pop(nonce, None)
    fin = f"\r{time.strftime('%-I:%M %p')} {filename}"
    fin += ' '*(os.get_terminal_size().columns - len(fin))
    print(fin)

def disp_progress(progress, filename, nonce):
    global current
    if nonce not in current:
        current[nonce] = [progress, filename]
    else:
        current[nonce][0] = progress
    res = "\r"
    first = True
    for non in current:
        if not first: res += "   "
        first = False
        res += f"[{int(current[non][0])}% "
        chunk = 8
        lower = int(chunk * current[non][0] / 50)
        prog = '='*(lower//2) + '-'*(lower-(lower//2)*2)
        prog += ' '*(chunk - len(prog))
        res += f"{prog} {current[non][1]}]"
    if len(res) > os.get_terminal_size().columns:
        res = res[:os.get_terminal_size().columns - 2] + '..'
    print(res, end='')
    sys.stdout.flush()


class FakeFile:
    def __init__(self):
        self.str = ""
        self.loc = 0

    def write(self, s):
        self.str += s

    def read(self, l):
        l = min(l, len(self.str) - self.loc)
        ret = self.str[self.loc:self.loc+l]
        self.loc += l
        return ret.encode('ascii')  # probably not the best but whatever

    def getsize(self):
        return len(self.str)

    def close(self):
        pass


class ProgressHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def send_head(self):
        """Send the response header and file size for progress tracking."""
        path = self.translate_path(self.path)

        if os.path.isdir(path):
            f = FakeFile()

            f.write(f"<h1>Listing for {self.path[1:]}/</h1><hr><ul>")

            if self.path != "/":
                f.write(f"<li><a href={os.path.dirname(self.path)}>..</a></li>")

            for file in os.listdir(path):
                filename = os.fsdecode(file)
                pathname = os.path.join(self.path, filename)

                f.write("<li>")

                if os.path.isfile(os.path.join(path, filename)):
                    filesize, level = os.path.getsize(os.path.join(path, filename)), 0

                    while filesize >= 1000:
                        filesize, level = filesize/1000, level+1

                    level, sz = ["B", "KB", "MB", "GB", "TB"][level], str(int(filesize))

                    if level != "B" and filesize < 10:
                        filesize = (filesize - int(filesize)) * 10
                        sz += '.' + str(int(filesize))

                    f.write(f"[{sz}{level}] ")

                f.write(f"<a href='{pathname}'>{filename}</a></li>")

            f.write("</ul><hr>powered by <a href='https://github.com/vmhl87/simplehttp'>simpleHTTP</a>  -  2024 vincent loh")
            
            self.file_size = f.getsize()

            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.send_header("Content-Length", str(self.file_size))
            self.end_headers()

            self.file_name = self.path[1:] + '/'

            return f
        
        try:
            self.file_size = os.path.getsize(path)
            
            self.send_response(200)

            mime = mimetypes.guess_type(path)[0]

            override = [".mkv", ".mp4", ".mov", ".webm", ".mp3", ".m4a", ".wav"]
            for o in override:
                if self.path.endswith(o):
                    mime = "application/octet-stream"

            self.file_name = self.path[1:]

            if mime:
                self.send_header("Content-type", mime)
            else:
                self.send_header("Content-type", "application/octet-stream")
            self.send_header("Content-Length", str(self.file_size))
            self.end_headers()
            
            return open(path, 'rb')
        except Exception as e:
            self.send_error(404, "File not found")
            return None

    def do_GET(self):
        """Serve a GET request and display download progress."""
        f = self.send_head()
        if f:
            try:
                file_size = self.file_size
                bytes_sent = 0
                chunk_size = 8192

                nonce = gen_nonce()
                
                while bytes_sent < file_size:
                    chunk = f.read(chunk_size)
                    if not chunk:
                        break
                    try:
                        self.wfile.write(chunk)
                    except:
                        break
                    bytes_sent += len(chunk)
                    
                    # Display progress
                    progress = (bytes_sent / file_size) * 100
                    disp_progress(progress, self.file_name, nonce)
                finish_progress(self.file_name, nonce)
            finally:
                f.close()
    
    def log_message(self, format, *args):
        pass


Handler = ProgressHTTPRequestHandler

with http.server.ThreadingHTTPServer(("", PORT), Handler) as httpd:
    print(f"Serving at port {PORT}")

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        pass

    httpd.server_close()
    print(" httpd exit")
